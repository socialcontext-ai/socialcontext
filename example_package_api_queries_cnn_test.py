# -*- coding: utf-8 -*-
"""Example package/API queries - CNN Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aAabCq-MkLFASmjTh0I9WhMQL0iPzAqJ


**Not a working example**

Psudocode example of anticipated web API client usage.
"""

import socialcontext
import csv

thefile = open('cnn_articles.csv', 'rb')
csvreader = csv.reader(thefile)

socialcontext.authenticate(key='XXX', secret='YYY')

#url use case, when source_type = 'url' use watson to fetch text, when source_type='text', pipe directly to tensorflow prediction
bad_articles = []
BRAND_SAFETY_MODELS = ['crime_violence','profanity','insults','race_identites']
for anarticle in csvreader:
  url = anarticle[0]
  results = socialcontext.classify(url, source_type='url', models=BRAND_SAFETY_MODELS, classfication_type='category'
  #returns a dictionary with the classifications in binary (e.g. 1 or 0), if classification_type == 'prob' returns probabilities
  any_model_count = 0
  for amodel in BRAND_SAFETY_MODELS:
    if results[amodel] == 1:
      any_model_count + = 1
  if any_model_count > 0:
    bad_articles.append(anarticle[0])

print('In all, %s articles were blocked for brand safety of %s resulting in a total blockage rate of %s' % (len(bad_articles), len(csvreader), (len(bad_articles)/len(csvreader)))

BRAND_EQUITY_MODELS = ['positive_diversity']
recovered_articles = []
for abad_article in bad_articles:
    url = abad_article[0]
    results = socialcontext.classify(url, source_type='url', models=BRAND_EQUITY_MODELS, classfication_type='category'
    #returns a dictionary with the classifications in binary (e.g. 1 or 0), if classification_type == 'prob' returns probabilities
    any_model_count = 0
    for amodel in BRAND_EQUITY_MODELS:
      if results[amodel] == 1:
        any_model_count + = 1
    if any_model_count > 0:
      recovered_articles.append(anarticle[0])

print('Of the %s articles that were blocked for brand safety, %s were restored, a recovery rate of %s' % (len(bad_articles), len(recovered_articles), (len(recovered_articles)/len(bad_articles)))
